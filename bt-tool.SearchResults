---- qsi Matches (122 in 3 files) ----
Bt-tool.c (src):#include <qsiFunc.h>
Bt-tool.c (src):	n_argv=(char **)qsi_malloc((n_argc)*sizeof(char*));
Bt-tool.c (src):		n_argv[i]=(char *)qsi_malloc((len+1)*sizeof(char));
qsiFunc.c (src): * qsiFunc.c
qsiFunc.c (src):#include "qsiFunc.h"
qsiFunc.c (src):void* qsi_malloc(size_t size)
qsiFunc.c (src):    if (size > 0 && size < QSI_MAX_ALLOC_SIZE){
qsiFunc.c (src):void* qsi_calloc(size_t size)
qsiFunc.c (src):    if (size > 0 && size < QSI_MAX_ALLOC_SIZE){
qsiFunc.c (src):void qsi_free(void *p)
qsiFunc.c (src):char* qsi_strdup(const char *s)
qsiFunc.c (src):        char *r = (char*)qsi_calloc(l);
qsiFunc.c (src):char *qsi_strlcpy(char *b, const char *s, size_t l)
qsiFunc.c (src):ssize_t qsi_read(int fd, void *buf, size_t count, int *type)
qsiFunc.c (src):ssize_t qsi_write(int fd, const void *buf, size_t count, int *type)
qsiFunc.c (src):ssize_t qsi_loop_read(int fd, void *data, size_t size, int *type)
qsiFunc.c (src):        if ((r = qsi_read(fd, data, size, type)) < 0)
qsiFunc.c (src):ssize_t qsi_loop_write(int fd, const void *data, size_t size, int *type)
qsiFunc.c (src):        if ((r = qsi_write(fd, data, size, type)) < 0)
qsiFunc.c (src):int qsi_close(int fd)
qsiFunc.c (src):    qsi_thread *t = (qsi_thread *)userdata;
qsiFunc.c (src):   qsi_atomic_inc(&t->running);
qsiFunc.c (src):   qsi_atomic_sub(2, &t->running);
qsiFunc.c (src):qsi_thread* qsi_thread_new(qsi_thread_func_t thread_func, void *userdata)
qsiFunc.c (src):	qsi_thread *t;
qsiFunc.c (src):	t=(qsi_thread *)qsi_malloc(sizeof(qsi_thread));
qsiFunc.c (src):	qsi_atomic_set(&t->running,0);
qsiFunc.c (src):        qsi_free(t);
qsiFunc.c (src):    qsi_atomic_inc(&t->running);
qsiFunc.c (src):void qsi_thread_free(qsi_thread *t)
qsiFunc.c (src):	qsi_thread_join(t);
qsiFunc.c (src):	qsi_free(t);
qsiFunc.c (src):int qsi_thread_join(qsi_thread *t)
qsiFunc.h (include): * qsiFunc.h
qsiFunc.h (include):#ifndef QSIFUNC_H_
qsiFunc.h (include):#define QSIFUNC_H_
qsiFunc.h (include):typedef int qsi_bool;
qsiFunc.h (include):#define FALSE ((qsi_bool) 0)
qsiFunc.h (include):#define QSI_MAX_ALLOC_SIZE (1024*1024*64)  //64MB
qsiFunc.h (include):#define QSI_LIKELY(x) (__builtin_expect(!!(x),1))
qsiFunc.h (include):#define QSI_UNLIKELY(x) (__builtin_expect(!!(x),0))
qsiFunc.h (include):#define QSI_PRETTY_FUNCTION __PRETTY_FUNCTION__
qsiFunc.h (include):#define QSI_LIKELY(x) (x)
qsiFunc.h (include):#define QSI_UNLIKELY(x) (x)
qsiFunc.h (include):#define QSI_PRETTY_FUNCTION ""
qsiFunc.h (include):#define qsi_nop() do {} while (FALSE)
qsiFunc.h (include):#ifdef QSI_ASSERT
qsiFunc.h (include):#define qsi_assert(expr)                                              		\
qsiFunc.h (include):        if (QSI_UNLIKELY(!(expr))) {                                     	\
qsiFunc.h (include):						#expr , __FILE__, __LINE__, QSI_PRETTY_FUNCTION);	\
qsiFunc.h (include):#define qsi_assert(expr) qsi_nop()
qsiFunc.h (include):#define QSI_MAX(a,b)                            \
qsiFunc.h (include):#define QSI_MIN(a,b)                            \
qsiFunc.h (include):#define QSI_MAX(a, b) 			((a) > (b) ? (a) : (b))
qsiFunc.h (include):#define QSI_MIN(a, b) 			((a) < (b) ? (a) : (b))
qsiFunc.h (include):#define QSI_ABS(a) 				((a) < 0 ? -(a) : (a))
qsiFunc.h (include):#define QSI_BIT_SET(var, bits)	((var) |= (bits))
qsiFunc.h (include):#define QSI_BIT_CLR(var, bits)	((var) &= ~(bits))
qsiFunc.h (include):#define QSI_BIT_AND(var, bits)	((var) &= (bits))
qsiFunc.h (include):#define QSI_BIT_VAL(var, bits)	((var) & (bits))
qsiFunc.h (include):#define QSI_GET_BITS(var, bits)	((var) & ((1ULL << bits)-1)
qsiFunc.h (include):#define QSI_ELEMENTSOF(x) (sizeof(x)/sizeof((x)[0]))
qsiFunc.h (include):void* qsi_malloc(size_t size);
qsiFunc.h (include):void* qsi_calloc(size_t size);
qsiFunc.h (include):void  qsi_free(void *p);
qsiFunc.h (include):char* qsi_strdup(const char *s);
qsiFunc.h (include):char *qsi_strlcpy(char *b, const char *s, size_t l);
qsiFunc.h (include):ssize_t qsi_read(int fd, void *buf, size_t count, int *type);
qsiFunc.h (include):ssize_t qsi_write(int fd, const void *buf, size_t count, int *type);
qsiFunc.h (include):ssize_t qsi_loop_read(int fd, void *data, size_t size, int *type);
qsiFunc.h (include):ssize_t qsi_loop_write(int fd, const void*data, size_t size, int *type);
qsiFunc.h (include):int qsi_close(int fd);
qsiFunc.h (include):static inline const char *qsi_strnull(const char *x)
qsiFunc.h (include):typedef struct qsi_atomic {
qsiFunc.h (include):} qsi_atomic_t;
qsiFunc.h (include):typedef struct qsi_atomic_ptr {
qsiFunc.h (include):} qsi_atomic_ptr_t;
qsiFunc.h (include):#define QSI_ATOMIC_INIT(i)	{ (i) }
qsiFunc.h (include):#define QSI_ATOMIC_PTR_INIT(v) { .value = (long) (v) }
qsiFunc.h (include):#ifdef __QSI_ARM_v6
qsiFunc.h (include):static inline void qsi_memory_barrier(void) {
qsiFunc.h (include):static inline int qsi_atomic_read(const qsi_atomic_t *a) {
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):static inline void qsi_atomic_set(qsi_atomic_t *a, int i) {
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):static inline int qsi_atomic_add( int i, qsi_atomic_t *a) {
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):static inline int qsi_atomic_sub( int i, qsi_atomic_t *a) {
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):static inline int qsi_atomic_inc(qsi_atomic_t *a) {
qsiFunc.h (include):    return qsi_atomic_add(1, a);
qsiFunc.h (include):static inline int qsi_atomic_dec(qsi_atomic_t *a) {
qsiFunc.h (include):    return qsi_atomic_sub(1, a);
qsiFunc.h (include):static inline void* qsi_atomic_ptr_load(const qsi_atomic_ptr_t *a) {
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):static inline void qsi_atomic_ptr_store(qsi_atomic_ptr_t *a, void *p) {
qsiFunc.h (include):    qsi_memory_barrier();
qsiFunc.h (include):#elif defined(__QSI_x86)
qsiFunc.h (include):static inline int qsi_atomic_read(const qsi_atomic_t *v)
qsiFunc.h (include):static inline void qsi_atomic_set(qsi_atomic_t *v, int i)
qsiFunc.h (include):static inline void qsi_atomic_add(int i, qsi_atomic_t *v)
qsiFunc.h (include):static inline void qsi_atomic_sub(int i, qsi_atomic_t *v)
qsiFunc.h (include):static inline void qsi_atomic_inc(qsi_atomic_t *v)
qsiFunc.h (include):static inline void qsi_atomic_dec(qsi_atomic_t *v)
qsiFunc.h (include):#define qsi_atomic_read(v)	(*(volatile int *)&(v)->value)
qsiFunc.h (include):#define qsi_atomic_set(v,i)	(((v)->value) = (i))
qsiFunc.h (include):#define qsi_atomic_add(i,v)	(((v)->value) = (((v)->value)+(i)))
qsiFunc.h (include):#define qsi_atomic_sub(i,v)	(((v)->value) = (((v)->value)-(i)))
qsiFunc.h (include):#define qsi_atomic_inc(v)	(((v)->value) = (((v)->value)+(1)))
qsiFunc.h (include):#define qsi_atomic_dec(v)	(((v)->value) = (((v)->value)-(1)))
qsiFunc.h (include):typedef void (*qsi_thread_func_t) (void *userdata);
qsiFunc.h (include):typedef struct qsi_thread {
qsiFunc.h (include):    qsi_thread_func_t thread_func;
qsiFunc.h (include):    qsi_bool joined;
qsiFunc.h (include):    qsi_atomic_t running;
qsiFunc.h (include):}qsi_thread;
qsiFunc.h (include):qsi_thread* qsi_thread_new(qsi_thread_func_t thread_func, void *userdata);
qsiFunc.h (include):void qsi_thread_free(qsi_thread *t);
qsiFunc.h (include):int qsi_thread_join(qsi_thread *t);
qsiFunc.h (include):#endif /* QSIFUNC_H_ */
